version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.18 #https://circleci.com/orbs/registry/orb/circleci/aws-cli

on-master-branch: &on-master-branch
  filters:
    tags:
      ignore: /.*/
    branches:
      only: master

on-branch: &on-branch
  filters:
    tags:
      ignore: /.*/
    branches:
      ignore: master

container_node_with_browsers: &container_node_with_browsers
  docker:
    # images at https://circleci.com/docs/2.0/circleci-images/
    - image: circleci/node:12-browsers

commands:
  checkout_repo:
    description: "restores repository from cache if exists and not changed, otherwise checks out the latest."
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - checkout
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
  install_node_dependencies:
    description: install node dependencies based on package-lock.json
    steps:
      - run: npm ci
  restore_node_dependencies:
    description: "restores node_modules from cache if exists and package-lock not changed, otherwise checks out the latest."
    steps:
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules  # location depends on npm version
            - node_modules
            - ~/.npm
          key: node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
  setup_context_variables:
    description: Setup context variables
    steps:
      - run:
          name: Set up context variables ( IS_PRODUCTION, IS_PULL_REQUEST, IS_STAGING, CURRENT_HASH, etc )
          command: bash ./scripts/setup-context-variables.sh
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - new-env-vars
  get_environment_variables:
    steps:
      - attach_workspace:
          at: ~/workspace
      - run:
          name: "Show Environment variables to use"
          command: cat ~/workspace/new-env-vars
      - run:
          name: "making environment variables available in current Bash Environment"
          command: cat ~/workspace/new-env-vars >> $BASH_ENV
  setup_aws_cli:
    description: setup and configure AWS credentials and config.
    steps:
      - aws-cli/install
      - run:
          name: setup and configure AWS credentials and config.
          command: bash ./scripts/setup-and-config-aws-cli.sh
      - run:
          name: aws-cli version
          command: aws --version

jobs:
  setup:
    <<: *container_node_with_browsers
    working_directory: ~/repo
    steps:
      - checkout_repo
      - restore_node_dependencies
      - install_node_dependencies
      - setup_context_variables
  build:
    <<: *container_node_with_browsers
    working_directory: ~/repo
    steps:
      - get_environment_variables
      - run:
          name: build app
          command: mkdir dist && echo "$(date -u +%Y-%m-%d_%H:%M:%S)" > ./dist/hash-$CIRCLE_SHA1.txt
      - run:
          name: copy dist to persist place
          command: cp -a dist/. ~/workspace/dist/
      - run:
          name: ls -la ~/workspace
          command: ls -la ~/workspace
      - persist_to_workspace:
          root: ~/workspace/
          paths:
            - dist
      - run:
          name: list dist folder's content
          command: ls -la dist
  lint:
    <<: *container_node_with_browsers
    working_directory: ~/repo
    steps:
      - get_environment_variables
      - run:
          name: lint
          command: npm run lint --if-present

  unit-tests:
    <<: *container_node_with_browsers
    working_directory: ~/repo
    steps:
      - get_environment_variables
      - run:
          name: running unit tests
          command: npm run test --if-present

  e2e-tests:
    <<: *container_node_with_browsers
    working_directory: ~/repo
    steps:
      - get_environment_variables
      - run:
          name: echo current chrome version
          command: google-chrome --version
      - run:
          name: running e2e tests
          command: npm run e2e --if-present

  deploy:
    <<: *container_node_with_browsers
    working_directory: ~/repo
    steps:
      - checkout_repo
      - get_environment_variables
      - attach_workspace:
          at: ~/workspace
      - setup_aws_cli
      - run:
          name: insert stage related config into dist folder
          command: echo $STAGE >> ~/workspace/dist/$STAGE.config
      - run:
          name: list dist folder
          command: ls -la ~/workspace/dist
      - run:
          name: deploying
          command: |
            echo "deploying dist to $STAGE environment"

  deploy_to_production:
    <<: *container_node_with_browsers
    working_directory: ~/repo
    environment:
      IS_PRODUCTION: true
    steps:
      - checkout_repo
      - get_environment_variables
      - attach_workspace:
          at: ~/workspace
      - setup_aws_cli
      - run:
          name: insert stage related config into dist folder
          command: echo $STAGE >> ~/workspace/dist/$STAGE.config
      - run:
          name: list dist folder
          command: ls -la ~/workspace/dist
      - run:
          name: deploying
          command: |
            echo "deploying dist to $STAGE environment"

workflows:
  version: 2.1
  # this runs on PR-s and branches.
  PULL_REQUEST_WORKFLOW:
    jobs:
      - setup:
          <<: *on-branch
      - build:
          <<: *on-branch
          requires:
            - setup
      - lint:
          <<: *on-branch
          requires:
            - setup
      - e2e-tests:
          <<: *on-branch
          requires:
            - setup
      - unit-tests:
          <<: *on-branch
          requires:
            - setup
      - deploy:
          <<: *on-branch
          requires:
            - e2e-tests
            - unit-tests
            - build
            - lint
  # This only runs on master branch
  MASTER_WORKFLOW:
    jobs:
      - setup:
          <<: *on-master-branch
      - build:
          <<: *on-master-branch
          requires:
            - setup
      - deploy:
          <<: *on-master-branch
          requires:
            - build
      # Wait for manual approval to deploy to production
      - approve_deployment_to_production:
          type: approval
          <<: *on-master-branch
          requires:
            - deploy
      # Deploy to production after approval
      - deploy_to_production:
          <<: *on-master-branch
          requires:
            - approve_deployment_to_production

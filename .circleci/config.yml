version: 2.1

on-master-brach-with-release-tag: &on-master-brach-with-release-tag
  filters:
    tags:
      only: /v[0-9]+(\.[0-9]+)*/
    branches:
      ignore: /.*/

on-master-brach-with-no-release-tag: &on-master-brach-with-no-release-tag
  filters:
    tags:
      ignore: /.*/
    branches:
      only: master

on-brach: &on-brach
  filters:
    tags:
      ignore: /.*/
    branches:
      ignore: master

container_config_node_latest: &container_config_node_latest
  docker:
    # images at https://circleci.com/docs/2.0/circleci-images/
    - image: circleci/node:latest

commands:
  checkout_repo:
    description: "restores repository from cache if exists and not changed, otherwise checks out the latest."
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - checkout
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
  install_node_dependencies:
    description: "restores node_modules from cache if exists and package-lock not changed, otherwise checks out the latest."
    steps:
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - run: npm ci
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules  # location depends on npm version
            - node_modules
            - ~/.npm
          key: node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
  setup_environment_variables:
    description: "Setup environment variables"
    steps:
      - run:
          name: "Setup environment variables"
          command: |
            version_tag_pattern="v[0-9]+(\.[0-9]+)*"
            if [[ $CIRCLE_TAG =~ $version_tag_pattern ]]; then
              export HAS_RELEASE_TAG=true
            else
              export HAS_RELEASE_TAG=false
            fi

            CURRENT_BRANCH=$(git symbolic-ref HEAD | cut -d"/" -f3)

            if [[ "${CURRENT_BRANCH}" == "master" ]]; then
                export IS_MASTER_BRANCH=true
            else
                export IS_MASTER_BRANCH=false
            fi

            if $IS_MASTER_BRANCH && $HAS_RELEASE_TAG ; then
              export IS_PRODUCTION=true
            else
              export IS_PRODUCTION=false
            fi

            if $IS_MASTER_BRANCH && !($HAS_RELEASE_TAG) ; then
              export IS_STAGING=true
            else
              export IS_STAGING=false
            fi

            if [ -z "$CI_PULL_REQUEST" ]
            then
              export IS_PULL_REQUEST=false
            else
              export IS_PULL_REQUEST=true
            fi

            export STAGE="dev" # default stage is dev environment                           ->  dev.example.com
            if $IS_PRODUCTION ; then
              export STAGE="prod" # master + release tag goes to production environment     ->  example.com
            fi
            if $IS_STAGING ; then
              export STAGE="staging" # master + no release tag goes to staging environment  ->  staging.examle.com
            fi
            export STAGE="staging"
            if $IS_PULL_REQUEST ; then
              export STAGE=$CIRCLE_USERNAME # pull request goes to PR opener's environment  ->  username.example.com
            fi

            mkdir ~/workspace
            touch ~/workspace/new-env-vars
            echo -e "export HAS_RELEASE_TAG=${HAS_RELEASE_TAG}" >> ~/workspace/new-env-vars
            echo -e "export CURRENT_BRANCH=${CURRENT_BRANCH}" >> ~/workspace/new-env-vars
            echo -e "export IS_MASTER_BRANCH=${IS_MASTER_BRANCH}" >> ~/workspace/new-env-vars
            echo -e "export IS_PULL_REQUEST=${IS_PULL_REQUEST}" >> ~/workspace/new-env-vars
            echo -e "export IS_PRODUCTION=${IS_PRODUCTION}" >> ~/workspace/new-env-vars
            echo -e "export STAGE=${STAGE}" >> ~/workspace/new-env-vars

            echo "Setting 'HAS_RELEASE_TAG' variable to: ${HAS_RELEASE_TAG}"
            echo "Setting 'CURRENT_BRANCH' variable to: ${CURRENT_BRANCH}"
            echo "Setting 'IS_MASTER_BRANCH' variable to: ${IS_MASTER_BRANCH}"
            echo "Setting 'IS_PRODUCTION' variable to: ${IS_PRODUCTION}"
            echo "Setting 'IS_STAGING' variable to: ${IS_STAGING}"
            echo "Setting 'IS_PULL_REQUEST' variable to: ${IS_PULL_REQUEST}"
            echo "Setting 'STAGE' variable to: ${STAGE}"

            cat ~/workspace/new-env-vars >> $BASH_ENV
            echo "Exporting variables to \"$BASH_ENV\" file, so we can use the variable in other jobs as well."
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - new-env-vars
  get_environment_variables:
    steps:
      - attach_workspace:
          at: ~/workspace
      - run:
          name: "Show Environment variables to use"
          command: cat ~/workspace/new-env-vars
      - run:
          name: "making environment variables available in current Bash Environment"
          command: cat ~/workspace/new-env-vars >> $BASH_ENV
  cache-build-artifact:
    steps:
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - dist
  restore-build-artifact:
    steps:
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: list dist folder's content
          command: ls -la dist
jobs:
  setup:
    <<: *container_config_node_latest
    working_directory: ~/repo
    steps:
      - checkout_repo
      - install_node_dependencies
      - setup_environment_variables
  build:
    <<: *container_config_node_latest
    working_directory: ~/repo
    steps:
      - get_environment_variables
      - run:
          name: build app
          command: mkdir dist && echo "$(date -u +%Y-%m-%d_%H:%M:%S)" > ./dist/test.txt
      - run:
          name: build app
          command: cat ~/workspace/new-env-vars >> dist/test2.txt
      - run:
          name: list dist folder's content
          command: ls -la dist
      - cache-build-artifact
  lint:
    <<: *container_config_node_latest
    working_directory: ~/repo
    steps:
      - get_environment_variables
      - run:
          name: lint
          command: |
            echo "Linting... aka analyze code for potential errors."

  unit-tests:
    <<: *container_config_node_latest
    working_directory: ~/repo
    steps:
      - get_environment_variables
      - run:
          name: running unit tests
          command: |
            echo "running unit tests"

  e2e-tests:
    <<: *container_config_node_latest
    working_directory: ~/repo
    steps:
      - get_environment_variables
      - run:
          name: running e2e tests
          command: |
            echo "running e2e tests"

  deploy:
    <<: *container_config_node_latest
    working_directory: ~/repo
    steps:
      - get_environment_variables
      - restore-build-artifact
      - run:
          name: list dist folder
          command: ls -la dist
      - run:
          name: deploying
          command: |
            echo "deploying dist to $STAGE environment"

workflows:
  version: 2.1
  # this runs on PR-s and braches.
  PULL_REQUEST_WORKFLOW:
    jobs:
      - setup:
          <<: *on-brach
      - build:
          <<: *on-brach
          requires:
            - setup
      - lint:
          <<: *on-brach
          requires:
            - setup
      - e2e-tests:
          <<: *on-brach
          requires:
            - setup
      - unit-tests:
          <<: *on-brach
          requires:
            - setup
      - deploy:
          <<: *on-brach
          requires:
            - e2e-tests
            - unit-tests
            - build
            - lint
  # This only runs on master branch without release tag
  STAGING_WORKFLOW:
    jobs:
      - setup:
          <<: *on-master-brach-with-no-release-tag
      - deploy:
          <<: *on-master-brach-with-no-release-tag
          requires:
            - setup
  # This only runs on master branch with release tag
  PRODUCTION_WORKFLOW:
    jobs:
      - setup:
          <<: *on-master-brach-with-release-tag
      - deploy:
          <<: *on-master-brach-with-release-tag
          requires:
            - setup
